// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("STUDENT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

model Student {
  id          Int        @id @default(autoincrement())
  givenName   String
  middleName  String
  familyName  String
  nickName    String
  dateOfBirth DateTime
  gender      GenderType
  contact     Contact    @relation(fields: [contactId], references: [id])
  contactId   Int
  user        User       @relation(fields: [userId], references: [id])
  userId      Int        @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Teacher {
  id          Int        @id @default(autoincrement())
  givenName   String
  middleName  String
  familyName  String
  nickName    String
  dateOfBirth DateTime
  gender      GenderType
  contact     Contact    @relation(fields: [contactId], references: [id])
  contactId   Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum RoleType {
  ADMIN
  MANAGER
}

model Staff {
  id          Int        @id @default(autoincrement())
  givenName   String
  middleName  String
  familyName  String
  nickName    String
  dateOfBirth DateTime
  gender      GenderType
  role        RoleType
  contact     Contact    @relation(fields: [contactId], references: [id])
  contactId   Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Contact {
  id          Int       @id @default(autoincrement())
  houseNo     String
  building    String
  floor       String
  mooNo       Int
  soi         String
  road        String
  subDistrict String
  district    String
  province    String
  postalCode  Int
  country     String
  students    Student[]
  teachers    Teacher[]
  staffs      Staff[]
  phones      Phone[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Phone {
  id        Int      @id @default(autoincrement())
  contactId Int
  number    String
  type      String
  contact   Contact  @relation(fields: [contactId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
