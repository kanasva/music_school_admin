// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum RoleType {
  STUDENT
  TEACHER
  ADMIN
  MANAGER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      RoleType
  student   Student?
  teacher   Teacher?
  staff     Staff?
  address   Address?
  phone     Phone[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

model Student {
  id              Int        @id @default(autoincrement())
  givenName       String
  middleName      String?
  familyName      String
  nickName        String
  dateOfBirth     DateTime
  gender          GenderType
  school          String
  lineId          String?
  parentFirstName String?
  parentLastName  String?
  user            User       @relation(fields: [userId], references: [id])
  userId          Int        @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Teacher {
  id          Int        @id @default(autoincrement())
  givenName   String
  middleName  String?
  familyName  String
  nickName    String
  dateOfBirth DateTime
  gender      GenderType
  lineId      String?
  user        User       @relation(fields: [userId], references: [id])
  userId      Int        @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Staff {
  id          Int        @id @default(autoincrement())
  givenName   String
  middleName  String?
  familyName  String
  nickName    String
  dateOfBirth DateTime
  gender      GenderType
  lineId      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      Int        @unique
  user        User       @relation(fields: [userId], references: [id])
}

model Address {
  id          Int      @id @default(autoincrement())
  houseNo     String
  building    String?
  floor       String?
  mooNo       String?
  soi         String?
  road        String?
  subDistrict String
  district    String
  province    String
  postalCode  String
  country     String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Phone {
  id        Int      @id @default(autoincrement())
  priority  Int
  number    String
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
